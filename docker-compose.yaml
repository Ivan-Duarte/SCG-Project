services:
  db:
    image: postgres:16-bullseye  # Usando uma versão baseada no Debian, mais compatível
    platform: linux/amd64
    container_name: dbPostgres
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "scg_inventory_db",
          "-U",
          "scg_user"
        ]
      interval: 3s
      retries: 5
      start_period: 30s
    environment:
      POSTGRES_USER: scg_user
      POSTGRES_PASSWORD: SCG_Db_2024safe  # Mesma senha que no .env
      POSTGRES_DB: scg_inventory_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
 
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db

  backend01:
    build:
      context: backend
      target: backend
    env_file:
      - ./backend/.env
    working_dir: /app
    restart: always
    container_name: backend01
    volumes:
      - ./backend:/app
    environment:
      - INSTANCE_ID=backend_01
    expose:
      - 8000
    ports:
      - 8001:8000
    depends_on:
      db:
        condition: service_healthy
        
  backend02:
    build:
      context: backend
      target: backend
    env_file:
      - ./backend/.env
    working_dir: /app
    restart: always
    container_name: backend02
    volumes:
      - ./backend:/app
    environment:
      - INSTANCE_ID=backend_02
    expose:
      - 8000
    ports:
      - 8002:8000
    depends_on:
      db:
        condition: service_healthy

  backend03:
    build:
      context: backend
      target: backend
    env_file:
      - ./backend/.env
    working_dir: /app
    restart: always
    container_name: backend03
    volumes:
      - ./backend:/app
    environment:
      - INSTANCE_ID=backend_03
    expose:
      - 8000
    ports:
      - 8003:8000
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data: